This document describes the KSK internals. It is mainly a scratchpad of ideas
and reminders for myself, but will also be helpful to anyone else looking at
the internals and wanting to make changes or find bugs.

Basics
------

KSK relies heavily on the KahLua Kore, and all of its modules, most notably
the loot distribution system (KLD or KKoreLoot) and the raid tracking system
(KRP or KKoreParty). A lot of code that used to be internal to KSK moved into
those two modules so that all addons that want to keep track of raid / party
members (in the case of KRP) or loot and loot tables (KLD) can use common
code that is easier to test in isolation.

The entire UI is created in code (no XML) using the Kore UI (KUI or KKoreUI)
module.

Initialisation
--------------

This is probably one of the trickiest parts of the mod as we have to jump
through a bunch of hoops to make sure that data that arrives late from the
server isn't used before it arrives. The client startup procedure is fairly
complex, with a lot of events that fire, sometimes multiple times for the
same event. Some of these events are poorly (or flat out incorrectly)
documented on the various dev sites and I try to correct them as I find
errors.

Both Kore extensions and KSK itself can (and do) contain an "OnLateInit"
function that is called by Kore when it believes that the system is reasonably
initialised. All of the Kore extensions will receive a KORE_READY message
after this function has executed. So either trapping that message or providing
that function will result in the initialisation code being run. Both KLD and
KRP use the OnLateInit callback to fire a KRP_INITIALISED or KLD_INITIALISED
message, which is internally trapped to do the actual initialisation of each
of those modules. KSK itself does the same thing although it does a bunch of
extra initialisation before sending KSK_INITIALISED. Once the XXX_INITIALISED
message has fired, the extension or mod is considered operational.

During initialisation all of the above code registers for events that they
care about. These event handlers mostly remain active in perpetuity, although
KSK does de-register some events when it is suspended. However, there is some
tricky stuff that goes on during initialsation. Let's use KRP as an example.
When it is initialising and determining the current list of raid players
(if any) it makes calls to any registered callbacks for certain activities.
For example when a new player is added to the active list of raiders, it
calls the "new_player" callback. When the client refreshes the UI or enters
the world for the first time, this KRP initialisation code is run, but because
there are no callbacks registered, no mod-specific data is recorded for each
player. As initialisation proceeds and Kore is now fully initialised and KSK
starts initialising, KSK registers a new callback handler for "new_player"
because we want to store some KSK specific data in each raid player entry.
This means that we want to refresh the raid player info after we have
registered the callback. However, addons that register with Kore start out
life in a disabled state and no callbacks are called (although messages are
still sent) for disabled addons. Only when the addon in question (KSK) is
completely initialised do we want to enable the addon in KRP. So in the KSK
final initialisation phase (handling the KSK_INITIALISED message) we first
enable KRP and then we enable KLD. Both of those addons register a handler for
the SUSPEND_ADDON and ACTIVATE_ADDON messages, and they both refresh all of
their data when these messages are sent by Kore. They both do a full refresh
of the data when those messages arrive, so now the KSK callbacks will be
called when the raid and loot tables are refreshed.

This is all a bit complex but it works well and allows both KLD and KRP to be
as independent from the mods that use them as possible. A lot of this stuff
happens behind the scenes in Kore, so from a KSK point of view all you need to
know is that it is during processing of KSK_INITIALISED that we enable the
callbacks for KSK and that KRP and KLD will refresh and now call the KSK
callbacks.

Suspend and Resume
------------------

The user can either manually suspend and resume the mod, or it can be done
automatically when the user has more than one Konfer module and they select a
module other than KSK to be the active Konfer module. When the module is
suspended we want to suspend our callbacks to both KRP and KLD, and when we
are resumed we want to resume them. When the module suspension state is
changed it will fire a KSK_SUSPENDED event and the argument will either be
true if KSK is being suspended, or false if it is being activated. A message
handler for KSK_SUSPENDED handles either enabling or disabling the callbacks
for KLD / KRP.

Normal Operation
----------------

Almost all of the rest of KSK is reacting to events we have registered with
the WoW client or to messages sent by Kore, Kore extensions and sometimes even
to events we sent ourself. Below is a list of the WoW events that are trapped
and how they are processed.

CHAT_MSG_WHISPER(...) [KSK]
  Sent when we are sent a whisper. Only config admins respond to whispers and
  may respond with the current suicide list, register bids, retractions etc.

CHAT_MSG_SYSTEM(...) [KSK]
  Only ever processed by the current master looter, and used to detect the
  results of users using the /roll command.

PLAYER_FLAGS_CHANGED(unit) [KRP]
  Sent when certain player flags are changed (such as AFK, online etc). This
  causes KRP to update the various flags in the KRP.players array. Causes no
  other events or messages to be fired.

PARTY_LOOT_METHOD_CHANGED() [KRP]
  Fires whenever the raid leader or party leader changes the looting method.
  This causes KRP to update the KRP.loot_method, KRP.is_ml, KRP.master_looter
  and KRP.players array to set is_ml correctly. Once all internal processing
  has been done fires KRP:LOOT_METHOD_UPDATED(new_method). new_method will be
  one of the KRP.LOOT_METHOD_XXX values.

PARTY_LEADER_CHANGED() [KRP]
  Fires when the main leader of the raid or party changes. Results in the
  KRP.is_pl, KRP.is_rl, KRP.is_aorl, KRP.leader and KRP.players entries being
  changed to set the is_rl, is_pl and is_aorl members correctly. After all
  internal processing has done it fires KRP:LEADER_CHANGED.

PLAYER_ROLES_ASSIGNED() [KRP]
  Fires when the current player changes their role. Updates KRP.user_role and
  KRP.players for the player and sets that user_role as well. After internal
  processing is done it fires KRP:ROLE_CHANGED.

GROUP_ROSTER_UPDATE() [KRP]
RAID_ROSTER_UPDATE() [KRP]
  Fires whenever the composition of positioning of players within the raid or
  party changes. Updates a bunch of KRP state variables: KRP.in_raid,
  KRP.in_party, KRP.in_battleground, KRP.players, KRP.party, KRP.raid,
  KRP.raidgroups, KRP.num_members, KRP.subgroup, KRP.raidid. Also sets the
  full information for each player in KRP.players. After all internal
  processing has been done fires several messages: IN_PARTY_CHANGED,
  IN_RAID_CHANGED, IN_BATTLEGROUND_CHANGED, IN_GROUP_CHANGED and finally
  GROUP_ROSTER_CHANGED. During processing of players, will use call the
  "new_player" callback for each player.

READY_CHECK
  Fired when a ready check is started. Sets up some internal variables in
  order to record the status of the ready check. These include
  KRP.ready_start, KRP.ready_timeout, KRP.ready_checking and KRP.ready. After
  all internal processing is done fires KRP:READYCHECK_START.

READY_CHECK_CONFIRM(unit,what) [KRP]
  Fired as each person in the raid or group either accepts or rejects the
  ready check. Updates KRP.ready. Fires no events.

READY_CHECK_FINISHED() [KRP]
  Fired when either everyone has responded or the timer has expired. Signals
  the end of a ready check. Sets the final disposition of all players in
  KRP.ready. Fires READYCHECK_END when done.

LOOT_READY() [KLD]
  Fires when looting tables are ready for a mob or chest that was recently
  looted. Some care is taken to ensure that this doesn't fire when doing
  things like mining, herbing or disenchanting. Sets all of the KLD variables:
  KLD.unit_name, KLD.unit_guid, KLD.unit_realguid, KLD.num_items, KLD.items.
  When it is done it fires KLD:ITEMS_UPDATED. During loot processing it also
  calls the "loot_item" callback. Before that callback is called however, if
  we are master looting, we get the "ml_candidate" callback for each valid
  candidate for the item. When all processing is complete, fires the
  KLD.LOOTING_READY event.

LOOT_CLOSED() [KLD]
  Fires when looting the given mob is done, either because the player
  cancelled looting or because all items were assigned. Resets all KLD
  variables and fires KLD.LOOTING_ENDED when done.

UNIT_SPELLCAST_SUCCEEDED() [KLD]
  Only used internally to detect mining, herbing etc. Generates nothing.

PLAYER_GUILD_UPDATE() [Kore]
  Fires when the players guild affiliation or flags change. This causes Kore
  to refresh certain critical bits of information, most notably the stuff in
  K.player and K.guild. Causes K:PLAYER_INFO_UPDATED to fire.

GUILD_ROSTER_UPDATE() [Kore]
  Fires when the guild roster (promotions, demotions, joins, quits etc)
  changes. The information required to process this is delayed until we get it
  from the server so this usually fires twice. Performs a full update of
  K.player and K.guild and fires K:PLAYER_INFO_UPDATED.

The following lists all of the internal messages we generate and who uses
them. These are identical in purpose to standard client events except that
they are generated by us, not by the client, so we have complete control and
know exactly when they fire and what they do. Handing these messages is an
important part of how KSK and Kore work. Note we don't cover all of the Kore
messages in this document.

ksk:KSK_CONFIG_ADMIN (onoff)
  Fired to indicate whether or not the player is an admin or owner of the
  current configuration. We use this to register handlers for events as
  described above, and to install message filters (or to remove them).

ksk:KSK_SUSPENDED (onoff)
  Fired when KSK is either suspended or resumed. We use this to enable or
  disable the addon callsback used by KLD / KRP.

K:PLAYER_INFO_UPDATED ()
  KRP traps this to cause a full refresh of the raid info. KSK traps this to
  populate various user interface elements such as the guild import dialog and
  to enable or disable various buttons, such as the guild import button.

KRP:GROUP_ROSTER_CHANGED ()
  Fired whenever KRP does a full refresh of the raid. KSK traps this in order
  to populate the list of disenchanters that are in the raid. That list is in
  turn used during loot distribution.

KRP:IN_RAID_CHANGED (inout)
  Fired when our state changes from in a raid to out, or out a raid to in. KSK
  traps this and uses it to reset some variables and set a few user interface
  elements.

KLD:ITEMS_UPDATED
  Fired when KLD refreshes the list of items on a looted corpse or in a chest.
  KSK traps this in order to set up the ksk.bossloot table, and to send the
  OLOOT internal event that other users will use to populate their lists.

KSK Communication
-----------------

KSK uses a clever mechanism for keeping users of the mod up to date. There are
two types of users: normal users and admins. The amount of information and its
content varies significantly between these two classes of users. Technically
KSK implements a distributed events database. Whenever something is done that
changes the internal state of the KSK databases (a new user is added, a new
list is created, a user is moved on a list etc) the person who initiated that
action generates an event. By and large, only admin users can generate events.
Each time an event is generated, is is broadcast to either the current raid
group (in the case of a PUG group) or to the raid group and the guild (in the
case of a guild config). Each event is tagged with the configuration to which
that event is tied. Since only one configuration can be active at a time, the
person generating the event will only ever generate events for their active
configuration. When they change active configs, they will be generating events
for that other configuration.

Only admins can create events but everyone can receive them, even normal
users. Some events are only intended for consumption by other admins, whereas
other events are intended for all users in the raid or all guild users who are
online. All possible events, and all the actions they take, are implemented in
KSK-Comms.lua. There is some dispatching code at the top but the majority of
this file is dedicated to processing events.

All admins know who the other admins are for a given configuration. Whenever
an admin generates an event, all other admins must receieve it. However, not
all admins may be online, so we need a mechanism for storing events. What each
admin does is store the events it generates for other admins in a list
dedicated to each admin. When that admin is online and the two admins are in
sync with each other, as the event is generated, the other admin receives it
and processes it. Both admins keep a record of the last event received from
each other. Now suppose one of those admins logs off. The online admin
generates some events, but stores them for the offline admin. At some future
point in time both admins are online and they request a sync status between
them. If either of the admins has events that the other does not, then they
are given an opportunity to sync, which means that they will receive all of
the events that the other admin egnerated after the last time they were in
sync. If there are only two admins, once they have both processed all events
that the other party has, they should be in sync and their data should be
identical. To confirm this, KSK keeps a checksum of the databases. If any two
admins have the same checksum then they can know to a considerable degree of
mathematical certainty that they have each processed the same events and that
their data is identical.

When there are more than 2 admins things start getting complicated, and they
get increasingly so the more admins there are. When there are 3 admins,
suppose only one is online and he is doing some maintenace on the lists,
and therefore generating events. Neither of the other two admins are online so
he is storing up events for both admins. Now one of them comes online and
requests a sync. Now those two admins will be up to date with respect to each
other but the third admin is still out of sync. Now suppose that third admin
later comes online and neither of the other two admins are. He makes some
changes, storing events. The second admin comes online and requests a sync
with the third. Now both of them are in sync with respect to each other, but
not totally in sync because the third admin still hasnt synced with the first.
Only after all three admins have been online at the same time and they have
all synced, will their checksums match. That is why it is possible for two
admins to be in sync with each other and yet have different checksums. All it
means is that one or both of them have receieved events from another admin (or
admins). It gets massively complicated trying to organise and verify that all
admins have processed the same events in the same order, and for this reason
it is very highly recommended that you never have more than 2 co-admins, and
that they should be chosen with care. If you have 3 admins they should be
people who are almost always on at the same time, or at least that two of them
are. Or simply that they dont make KSK changes until the other admins are
online.

For normal users things arent nearly so complicated. At the start of the raid
the master looter should broadcast their config to the raid. That will ensure
that all non-admin raiders have an identical copy of the data that the master
looter does. Other admins ignore these broadcasts as they get their data
through the event sharing, but for normal users, they simply accept the
configuration information verbatim from the master looter. So now the users
will have the same lists and the same users in the same spot as the master
looter. When the master looter then opens a chest or loots a boss, they send
events to that effect to the whole raid (and possibly also guild). This will
cause KSK to pop up on the users screen with the same loot and list data that
the master looter sees. As the master looter selects loot and opens items for
bidding, these things are communicated to all other users in the raid. Thus,
whatever the master looter is seeing on their screen is mirrored on every
other raiders screen. The data is identical.

This all sounds very complex but in reality its pretty simple and works well.
The only complexity is when there are multiple admins that are out of sync
with each other, and this situation can be easily avoided by ensuring that all
admins are online (or only 1 is away) when doing list maintenance or running
raids.

The User Interface (and dealing with data)
------------------------------------------

Arguably the most important part of the addon is how the users ultimately
interact with it to do the work the mod needs to do. The UI is completely
controlled by code, using KKoreUI (KUI). No XML files involved to obscure
where things are happening. In reality the UI is fairly simple. There are a
number of tabs, 2 of which everyone can see, and 3 extra ones which admins can
see. Each of these tabs, which are selected along the bottom edge of the mod,
can have sub-tabs, which are selected along the top. Again, the admins have
more tabs visible to them than normal users do. To use the in-code
terminology, the bottom tabs are called tabs, and the top ones are called
pages.

The entire "shape" of the UI is set up in KSK-Init.lua. This sets the 5 main
tabs and the various pages within those tabs. These tabs are, in order,
the lists tab (KSK-Lists.lua), the loot tab (KSK-Loot.lua), the users tab
(KSK-Users.lua), the sync tab (KSK-Sync.lua) and the config tab
(KSK-Config.lua). As you can see each tab has its own file which completely
controls the content of that tab. The idea is to have anything that deals with
the UI and the data that the UI needs all in a single file. The main UI
(KSK-Init.lua) creates the main tabbed dialog, and calls the initialisation
functions for each of the main tabs.

To the greatest degree possible, we try to preserve the following convention,
for each value of XXX (Lists, Loot, Users, Sync and Config):

ksk.InitialiseXXXUI ()
  Initialises the given UI. This will create all of the user interface
  elements inside the given tab. At this point no attempt should be made to
  populate the user interface elements. That is handled by a different
  function discussed below. During initialisation certain events may fire that
  will want to pick up data, so the data tables should at least be valid.

ksk.RefreshXXXUI (reset)
  Populate all of the fields in the given tab with the appropriate data,
  usually based on the current config. In order for these functions to work
  the current config must be set and its data must be valid. Note that some
  tabs which have pages may include sub-refresh functions. For example
  the loot tab will have sub functions for the assignment, item edit and
  history pages. These sub-functions are always called from this top level
  function, although they can also be called individually to refresh just
  certain portions of the UI if only a minimal amount of data has changed.

  The only argument to this function is a boolean that indicates whether or
  not the refresh should first reset any data associated with the UI. For
  example, if this is true, then the lists panel will reset the currently
  selected list variable, and the currently selected member variable. This is
  done *before* any user interface elements are updated. Typically this will
  only ever be done by the ksk.FullRefresh() function described below, which
  is called when a new config is being selected. This is important because we
  do not want any data associated with the old config to bleed through to the
  new config, not to mention the fact that some of the data will almost
  certainly simply be wrong.

There is a utility function ksk.FullRefresh() that will refresh all portions
of the UI. This is usually done after a new config has been activated, as well
as during module initialisation.

As a guiding principle, great care should be taken to avoid storing user
interface selections or options in the global (ksk) space. Not only does this
slow down table access to that table, it makes it more difficult to ensure
that all initialisation happens cleanly. For the most part, none of the user
interface elements really need to know about the state of other UI elements,
and therefore there is no need to store any data globally. Should the need
arise for other portions of the code to query the particular value of a UI
element, or to change it, then getter/setter functions must be created for
that element.

In each file dealing with UI/data there is a local table qf that stands for
"quick frame". This is a table of short-cuts to the various user interface
elements for quick and easy access to them. There should be no need for these
to be exposed outside of each module, except through helper functions. This
keeps the data as isolated as possible.

User Interface Data Interaction
-------------------------------

One of the trickier parts of the mod is ensuring that the various UI elements
get updated when the underlying data is changed. There are a number of places
where the same information is displayed, sometimes in slightly different
forms. This documents how those things interact. First, we list the data items
and the user interface elements that need to be updated when that data
changes, and then we list the various user interface elements and what data
backs them. This list must be kept up to date. The data items are discussed in
terms of where they are stored under ksk.frdb.

configs
  The list of all configurations that the user knows about. This is changed
  when the user either adds a new config or accepts a broadcast config from
  the guild master or the raid leader of a PUG. The user can also delete
  configurations. Affects the following UI elements:

  o  The config selection drop down that is displayed at the top right corner
     of every UI panel. This is updated by RefreshConfigAdminUI().
  o  The list of all configurations that is displayed in the config admin UI
     in the left hand panel. This panel is what allows users to modify the
     various configs they know about (if they have permission to do so).

  The currently selected config is always stored in ksk.currentid. A number of
  convenient aliases into the config are also stored at the global level and
  these change when this does. See KKonferSK.lua for details.

  Note that data for configs other than the currently selected config can be
  changed during normal operations. This can happen when, for example you have
  both a guild config and a private config. While the private config is
  active, and change events sent for the guild config will still be processed
  and result in the data changing. However, since that data is not currently
  being displayed anywhere, the change has no visual effect.

  When this changes it also changes frdb.defconfig so that the UI always
  reloads with the last selected configuration.

All of the rest of the data is part of the config structure mentioned above.
So all of these entries appear under ksk.frdb.configs[config_id].

settings
  The full list of configuration options for the config. These settings are
  displayed in the 3 panels of the admin tab. The settings on the first two
  pages are user-specific and their values are not synchronised between
  admins. The settings on the 3rd page, the config admin page, can only ever
  be set by the config owner. This includes the list of co-admins and other
  options that implement policy as opposed to user preference, which the first
  two tabs represent. These values are refreshed by RefreshConfigUI() although
  each of the tabs has its own callable refresh function:
  RefreshConfigLootUI(), RefreshConfigRollUI() and RefreshConfigAdminUI().
